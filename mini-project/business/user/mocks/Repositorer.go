// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	user "github.com/dewidyabagus/go-hexagonal/business/user"
	mock "github.com/stretchr/testify/mock"
)

// Repositorer is an autogenerated mock type for the Repositorer type
type Repositorer struct {
	mock.Mock
}

// GetUserWithEmail provides a mock function with given fields: ctx, email
func (_m *Repositorer) GetUserWithEmail(ctx context.Context, email string) (*user.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *user.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *user.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserWithID provides a mock function with given fields: ctx, id
func (_m *Repositorer) GetUserWithID(ctx context.Context, id uint64) (*user.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *user.User
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *user.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostUser provides a mock function with given fields: ctx, _a1
func (_m *Repositorer) PostUser(ctx context.Context, _a1 user.User) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, user.User) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutUserWithID provides a mock function with given fields: ctx, id, _a2
func (_m *Repositorer) PutUserWithID(ctx context.Context, id uint64, _a2 user.User) error {
	ret := _m.Called(ctx, id, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, user.User) error); ok {
		r0 = rf(ctx, id, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepositorer interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepositorer creates a new instance of Repositorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositorer(t mockConstructorTestingTNewRepositorer) *Repositorer {
	mock := &Repositorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
